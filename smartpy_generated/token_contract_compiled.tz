parameter (or (or (or (pair %approve (address %spender) (nat %value)) (pair %burn (address %address) (nat %value))) (or (address %getAdministrator) (or (pair %getAllowance (pair %arg (address %owner) (address %spender)) (address %target)) (pair %getBalance (address %arg) (address %target))))) (or (or (address %getTotalSupply) (or (pair %mint (address %address) (nat %value)) (address %setAdministrator))) (or (bool %setPause) (or (pair %transfer (address %from_) (pair (address %to_) (nat %value))) (pair %transferSigned (pair (address %from_) (key %pk)) (pair (signature %signed) (pair (address %to_) (nat %value))))))));
storage   (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)));
code
  {
    # Global variable: transfer_helper # pair @parameter @storage
    LAMBDA
      (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))
      (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
      {
        # __operations__ = sp.local("__operations__", sp.list([]), sp.TList(sp.TOperation)) # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        NIL operation; # list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : list operation
        # __storage__ = sp.local("__storage__", lparams_0.in_storage, sp.TRecord(administrator = sp.TAddress, balances = sp.TBigMap(sp.TAddress, sp.TRecord(approvals = sp.TMap(sp.TAddress, sp.TNat), balance = sp.TNat, counter = sp.TNat).layout(("approvals", ("balance", "counter")))), paused = sp.TBool, totalSupply = sp.TNat).layout((("administrator", "balances"), ("paused", "totalSupply")))) # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : list operation
        DUG 2;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        # sp.verify((lparams_0.in_param.sender_ == self.data.administrator) | ((~ self.data.paused) & ((lparams_0.in_param.from_ == lparams_0.in_param.sender_) | (self.data.balances[lparams_0.in_param.from_].approvals[lparams_0.in_param.sender_] >= lparams_0.in_param.value)))) # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAAR;       # address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 3;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAADR;      # address : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        COMPARE;    # int : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        EQ;         # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF
          {
            PUSH bool True; # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
          }
          {
            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CDAR;       # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            IF
              {
                PUSH bool False; # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
              }
              {
                DIG 2;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                CAADR;      # address : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                SWAP;       # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                DUG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                CAAAR;      # address : address : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                COMPARE;    # int : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                EQ;         # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                IF
                  {
                    PUSH bool True; # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                  }
                  {
                    DIG 2;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                    DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                    DUG 3;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    CADDR;      # nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : nat : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : nat : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    DUG 2;      # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    DIG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                    DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                    DUG 5;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    CAAAR;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    IF_SOME
                      {
                        # of_some: Get-item:13 # @some : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                      }
                      {
                        PUSH int 13; # int : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    CAR;        # map address nat : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    DIG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : map address nat : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                    DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : map address nat : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
                    DUG 5;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : map address nat : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    CAADR;      # address : map address nat : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    GET;        # option nat : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    IF_SOME
                      {
                        # of_some: Get-item:13 # @some : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                      }
                      {
                        PUSH int 13; # int : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    COMPARE;    # int : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                    GE;         # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                  }; # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
              }; # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
          }; # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF
          {}
          {
            PUSH string "WrongCondition: (lparams_0.in_param.sender_ == self.data.administrator) | ((~ self.data.paused) & ((lparams_0.in_param.from_ == lparams_0.in_param.sender_) | (self.data.balances[lparams_0.in_param.from_].approvals[lparams_0.in_param.sender_] >= lparams_0.in_param.value)))"; # string : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            FAILWITH;   # FAILED
          }; # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        # if ~ (self.data.balances.contains(lparams_0.in_param.to_)): # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 3;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADAR;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        MEM;        # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF
          {}
          {
            # self.data.balances[lparams_0.in_param.to_] = sp.record(approvals = {}, balance = 0, counter = 0) # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CDR;        # pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CDR;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DIG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation
            DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation
            DUG 5;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CADAR;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            PUSH (option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) (Some (Pair {} (Pair 0 0))); # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # address : option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            UPDATE;     # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            PAIR;       # pair address (big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            PAIR;       # pair (pair address (big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
          }; # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        # sp.verify(self.data.balances[lparams_0.in_param.from_].balance >= lparams_0.in_param.value) # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 2;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUG 3;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADDR;      # nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : nat : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : nat : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUG 2;      # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUG 5;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAAAR;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF_SOME
          {
            # of_some: Get-item:15 # @some : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
          }
          {
            PUSH int 15; # int : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            FAILWITH;   # FAILED
          }; # @some : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDAR;       # nat : nat : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        COMPARE;    # int : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        GE;         # bool : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF
          {}
          {
            PUSH string "WrongCondition: self.data.balances[lparams_0.in_param.from_].balance >= lparams_0.in_param.value"; # string : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            FAILWITH;   # FAILED
          }; # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        # self.data.balances[lparams_0.in_param.from_].balance = sp.as_nat(self.data.balances[lparams_0.in_param.from_].balance - lparams_0.in_param.value) # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDR;        # pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDR;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 6;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUG 7;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAAAR;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # address : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUG 2;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF_SOME
          {}
          {
            PUSH int 16; # int : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            FAILWITH;   # FAILED
          }; # @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # @some : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAR;        # map address nat : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # @some : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDDR;       # nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 8;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUG 9;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADDR;      # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 7;      # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 9;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation
        DUG 10;     # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAAAR;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF_SOME
          {
            # of_some: Get-item:16 # @some : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
          }
          {
            PUSH int 16; # int : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            FAILWITH;   # FAILED
          }; # @some : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDAR;       # nat : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SUB;        # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        ISNAT;      # option nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF_SOME
          {}
          {
            PUSH int 16; # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            FAILWITH;   # FAILED
          }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair @some nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # map address nat : pair @some nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair (map address nat) (pair @some nat) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SOME;       # option (pair (map address nat) (pair @some nat)) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # address : option (pair (map address nat) (pair @some nat)) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        UPDATE;     # big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # address : big_map address (pair (map address nat) (pair nat nat)) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        # self.data.balances[lparams_0.in_param.to_].balance += lparams_0.in_param.value # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDR;        # pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAR;        # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAR;        # address : pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDR;        # big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 5;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
        DUG 6;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADAR;      # address : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # address : address : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUG 2;      # address : big_map address (pair (map address nat) (pair nat nat)) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        GET;        # option (pair (map address nat) (pair nat nat)) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF_SOME
          {}
          {
            PUSH int 17; # int : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            FAILWITH;   # FAILED
          }; # @some : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # @some : @some : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAR;        # map address nat : @some : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # @some : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDR;        # pair nat nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DUP;        # pair nat nat : pair nat nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CDR;        # nat : pair nat nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # pair nat nat : nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAR;        # nat : nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 8;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : nat : nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : nat : nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
        DUG 9;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : nat : nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CADDR;      # nat : nat : nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        ADD;        # nat : nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair nat nat : map address nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair (map address nat) (pair nat nat) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SOME;       # option (pair (map address nat) (pair nat nat)) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # address : option (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        UPDATE;     # big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        SWAP;       # address : big_map address (pair (map address nat) (pair nat nat)) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        # if (lparams_0.in_param.from_ != lparams_0.in_param.sender_) & (self.data.administrator != lparams_0.in_param.sender_): # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        DIG 2;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        CAADR;      # address : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        SWAP;       # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        DUG 4;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        CAAAR;      # address : address : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        COMPARE;    # int : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        NEQ;        # bool : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF
          {
            DIG 2;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DUG 3;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAADR;      # address : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : address : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : address : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUG 2;      # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : address : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAAR;       # address : address : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            COMPARE;    # int : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            NEQ;        # bool : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
          }
          {
            PUSH bool False; # bool : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
          }; # bool : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
        IF
          {
            # self.data.balances[lparams_0.in_param.from_].approvals[lparams_0.in_param.sender_] = sp.as_nat(self.data.balances[lparams_0.in_param.from_].approvals[lparams_0.in_param.sender_] - lparams_0.in_param.value) # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CDR;        # pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAR;        # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAR;        # address : pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CDR;        # big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DIG 6;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DUG 7;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAAAR;      # address : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # address : address : big_map address (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUG 2;      # address : big_map address (pair (map address nat) (pair nat nat)) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            GET;        # option (pair (map address nat) (pair nat nat)) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            IF_SOME
              {}
              {
                PUSH int 19; # int : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                FAILWITH;   # FAILED
              }; # @some : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DUP;        # @some : @some : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CDR;        # pair nat nat : @some : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            SWAP;       # @some : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAR;        # map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DIG 8;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            CAADR;      # address : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            SWAP;       # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DUG 10;     # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CADDR;      # nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DIG 8;      # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CADR;       # big_map address (pair (map address nat) (pair nat nat)) : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DIG 10;     # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            DUP;        # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            DUG 11;     # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : big_map address (pair (map address nat) (pair nat nat)) : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAAAR;      # address : big_map address (pair (map address nat) (pair nat nat)) : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            GET;        # option (pair (map address nat) (pair nat nat)) : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            IF_SOME
              {
                # of_some: Get-item:19 # @some : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
              }
              {
                PUSH int 19; # int : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
                FAILWITH;   # FAILED
              }; # @some : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            CAR;        # map address nat : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation : pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
            DIG 10;     # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : map address nat : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            CAADR;      # address : map address nat : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            GET;        # option nat : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            IF_SOME
              {
                # of_some: Get-item:19 # @some : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
              }
              {
                PUSH int 19; # int : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
                FAILWITH;   # FAILED
              }; # @some : nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            SUB;        # int : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            ISNAT;      # option nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            IF_SOME
              {}
              {
                PUSH int 19; # int : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
                FAILWITH;   # FAILED
              }; # @some : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            SOME;       # option nat : address : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            SWAP;       # address : option nat : map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            UPDATE;     # map address nat : pair nat nat : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            PAIR;       # pair (map address nat) (pair nat nat) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            SOME;       # option (pair (map address nat) (pair nat nat)) : address : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            SWAP;       # address : option (pair (map address nat) (pair nat nat)) : big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            UPDATE;     # big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : list operation
            SWAP;       # address : big_map address (pair (map address nat) (pair nat nat)) : pair (bool %paused) (nat %totalSupply) : list operation
            PAIR;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : list operation
            PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
          }
          {
            DIG 2;      # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
            DROP;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
          }; # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        UNIT;       # unit : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        # sp.result(sp.record(operations = sp.operations(), result = __s1.value, storage = self.data)) # unit : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : list operation
        PAIR %result %storage; # pair (unit %result) (pair %storage (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))) : list operation
        SWAP;       # list operation : pair (unit %result) (pair %storage (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)))
        PAIR %operations; # pair (list %operations operation) (pair (unit %result) (pair %storage (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))))
      }; # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
    DUP;        # pair @parameter @storage : pair @parameter @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
    CDR;        # @storage : pair @parameter @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
    SWAP;       # pair @parameter @storage : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
    CAR;        # @parameter : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%approve : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                # == approve ==
                # sp.verify(~ self.data.paused) # @storage : @parameter%approve : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @storage : @storage : @parameter%approve : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUG 2;      # @storage : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CDAR;       # bool : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF
                  {
                    PUSH string "WrongCondition: ~ self.data.paused"; # string : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                # sp.verify((self.data.balances[sp.sender].approvals.get(params.spender, default_value = 0) == 0) | (params.value == 0), message = 'UnsafeAllowanceChange') # @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                PUSH nat 0; # nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DIG 2;      # @storage : nat : @parameter%approve : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @storage : @storage : nat : @parameter%approve : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUG 3;      # @storage : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                SENDER;     # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF_SOME
                  {
                    # of_some: Get-item:49 # @some : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                  }
                  {
                    PUSH int 49; # int : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CAR;        # map address nat : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DIG 2;      # @parameter%approve : map address nat : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @parameter%approve : @parameter%approve : map address nat : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUG 3;      # @parameter%approve : map address nat : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CAR;        # address : map address nat : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                GET;        # option nat : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF_SOME
                  {
                    # of_some: Get-item:49 # @some : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                  }
                  {
                    PUSH nat 0; # nat : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                  }; # @some : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                COMPARE;    # int : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                EQ;         # bool : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF
                  {
                    PUSH bool True; # bool : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                  }
                  {
                    DUP;        # @parameter%approve : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CDR;        # nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PUSH nat 0; # nat : nat : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    COMPARE;    # int : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    EQ;         # bool : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                  }; # bool : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF
                  {
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%approve : @storage
                    DROP;       # @parameter%approve : @storage
                  }
                  {
                    PUSH string "UnsafeAllowanceChange"; # string : @parameter%approve : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%approve : @storage
                SWAP;       # @storage : @parameter%approve
                # self.data.balances[sp.sender].approvals[params.spender] = params.value # @storage : @parameter%approve
                DUP;        # @storage : @storage : @parameter%approve
                CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%approve
                SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CDR;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SENDER;     # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # address : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUG 2;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                IF_SOME
                  {}
                  {
                    PUSH int 51; # int : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # @some : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CDR;        # pair (nat %balance) (nat %counter) : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SWAP;       # @some : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CAR;        # map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DIG 6;      # @parameter%approve : map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                DUP;        # @parameter%approve : @parameter%approve : map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                CAR;        # address : @parameter%approve : map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                SWAP;       # @parameter%approve : address : map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                CDR;        # nat : address : map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                SOME;       # option nat : address : map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                SWAP;       # address : option nat : map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                UPDATE;     # map address nat : pair (nat %balance) (nat %counter) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                PAIR;       # pair (map address nat) (pair (nat %balance) (nat %counter)) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                SOME;       # option (pair (map address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                SWAP;       # address : option (pair (map address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                UPDATE;     # big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                SWAP;       # address : big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))) : pair (bool %paused) (nat %totalSupply)
                PAIR;       # pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply)
                PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
              }
              {
                SWAP;       # @storage : @parameter%burn : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                # == burn ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%burn : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @storage : @storage : @parameter%burn : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUG 2;      # @storage : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CAAR;       # address : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                SENDER;     # address : address : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                COMPARE;    # int : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                EQ;         # bool : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                # sp.verify(self.data.balances[params.address].balance >= params.value) # @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @parameter%burn : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CDR;        # nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DIG 2;      # @storage : nat : @parameter%burn : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @storage : @storage : nat : @parameter%burn : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUG 3;      # @storage : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DIG 2;      # @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @parameter%burn : @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUG 3;      # @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CAR;        # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                  }
                  {
                    PUSH int 77; # int : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CDAR;       # nat : nat : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                COMPARE;    # int : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                GE;         # bool : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF
                  {
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%burn : @storage
                    DROP;       # @parameter%burn : @storage
                  }
                  {
                    PUSH string "WrongCondition: self.data.balances[params.address].balance >= params.value"; # string : @parameter%burn : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%burn : @storage
                SWAP;       # @storage : @parameter%burn
                # self.data.balances[params.address].balance = sp.as_nat(self.data.balances[params.address].balance - params.value) # @storage : @parameter%burn
                DUP;        # @storage : @storage : @parameter%burn
                DUG 2;      # @storage : @parameter%burn : @storage
                DUP;        # @storage : @storage : @parameter%burn : @storage
                CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%burn : @storage
                SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                CDR;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DUP;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DIG 4;      # @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUP;        # @parameter%burn : @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUG 5;      # @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                CAR;        # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DUP;        # address : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DUG 2;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                IF_SOME
                  {}
                  {
                    PUSH int 78; # int : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DUP;        # @some : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                CAR;        # map address nat : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                SWAP;       # @some : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                CDDR;       # nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DIG 6;      # @parameter%burn : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUP;        # @parameter%burn : @parameter%burn : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUG 7;      # @parameter%burn : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn : @storage
                DIG 8;      # @storage : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                DIG 8;      # @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                DUP;        # @parameter%burn : @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                DUG 9;      # @parameter%burn : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                CAR;        # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                IF_SOME
                  {
                    # of_some: Get-item:78 # @some : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                  }
                  {
                    PUSH int 78; # int : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                CDAR;       # nat : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                SUB;        # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                ISNAT;      # option nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                IF_SOME
                  {}
                  {
                    PUSH int 78; # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                    FAILWITH;   # FAILED
                  }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                PAIR;       # pair @some nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                SWAP;       # map address nat : pair @some nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                PAIR;       # pair (map address nat) (pair @some nat) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                SOME;       # option (pair (map address nat) (pair @some nat)) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                SWAP;       # address : option (pair (map address nat) (pair @some nat)) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                UPDATE;     # big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                SWAP;       # address : big_map address (pair (map address nat) (pair nat nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                PAIR;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : @parameter%burn
                PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%burn
                # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.value) # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%burn
                DUP;        # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%burn
                DUG 2;      # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%burn : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))
                DUP;        # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%burn : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))
                CAR;        # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%burn : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))
                SWAP;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%burn : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))
                CDAR;       # bool : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%burn : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))
                DIG 2;      # @parameter%burn : bool : pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))
                CDR;        # nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply))
                DIG 3;      # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                CDDR;       # nat : nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                SUB;        # int : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                ISNAT;      # option nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                IF_SOME
                  {}
                  {
                    PUSH int 79; # int : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                    FAILWITH;   # FAILED
                  }; # @some : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                SWAP;       # bool : @some : pair address (big_map address (pair (map address nat) (pair nat nat)))
                PAIR;       # pair bool @some : pair address (big_map address (pair (map address nat) (pair nat nat)))
                SWAP;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair bool @some
                PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair bool @some)
              }; # pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
            NIL operation; # list operation : pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
          }
          {
            IF_LEFT
              {
                DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%getAdministrator : @storage
                DROP;       # @parameter%getAdministrator : @storage
                # == getAdministrator ==
                # sp.transfer(self.data.administrator, sp.tez(0), sp.contract(sp.TAddress, params.target).open_some()) # @parameter%getAdministrator : @storage
                CONTRACT address; # option (contract address) : @storage
                NIL operation; # list operation : option (contract address) : @storage
                SWAP;       # option (contract address) : list operation : @storage
                IF_SOME
                  {}
                  {
                    PUSH int 99; # int : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @storage
                PUSH mutez 0; # mutez : @some : list operation : @storage
                DIG 3;      # @storage : mutez : @some : list operation
                DUP;        # @storage : @storage : mutez : @some : list operation
                DUG 4;      # @storage : mutez : @some : list operation : @storage
                CAAR;       # address : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%getAllowance : @storage
                    DROP;       # @parameter%getAllowance : @storage
                    # == getAllowance ==
                    # sp.transfer(self.data.balances[params.arg.owner].approvals[params.arg.spender], sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getAllowance : @storage
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : @storage
                    CDR;        # address : @parameter%getAllowance : @storage
                    CONTRACT nat; # option (contract nat) : @parameter%getAllowance : @storage
                    NIL operation; # list operation : option (contract nat) : @parameter%getAllowance : @storage
                    SWAP;       # option (contract nat) : list operation : @parameter%getAllowance : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 91; # int : list operation : @parameter%getAllowance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @parameter%getAllowance : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%getAllowance : @storage
                    DIG 4;      # @storage : mutez : @some : list operation : @parameter%getAllowance
                    DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getAllowance
                    DUG 5;      # @storage : mutez : @some : list operation : @parameter%getAllowance : @storage
                    CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @parameter%getAllowance : @storage
                    DIG 4;      # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @storage
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @storage
                    DUG 5;      # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @parameter%getAllowance : @storage
                    CAAR;       # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @parameter%getAllowance : @storage
                    GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @parameter%getAllowance : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:91 # @some : mutez : @some : list operation : @parameter%getAllowance : @storage
                      }
                      {
                        PUSH int 91; # int : mutez : @some : list operation : @parameter%getAllowance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : mutez : @some : list operation : @parameter%getAllowance : @storage
                    CAR;        # map address nat : mutez : @some : list operation : @parameter%getAllowance : @storage
                    DIG 4;      # @parameter%getAllowance : map address nat : mutez : @some : list operation : @storage
                    CADR;       # address : map address nat : mutez : @some : list operation : @storage
                    GET;        # option nat : mutez : @some : list operation : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:91 # @some : mutez : @some : list operation : @storage
                      }
                      {
                        PUSH int 91; # int : mutez : @some : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%getBalance : @storage
                    DROP;       # @parameter%getBalance : @storage
                    # == getBalance ==
                    # sp.transfer(self.data.balances[params.arg.owner].balance, sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getBalance : @storage
                    DUP;        # @parameter%getBalance : @parameter%getBalance : @storage
                    CDR;        # address : @parameter%getBalance : @storage
                    CONTRACT nat; # option (contract nat) : @parameter%getBalance : @storage
                    NIL operation; # list operation : option (contract nat) : @parameter%getBalance : @storage
                    SWAP;       # option (contract nat) : list operation : @parameter%getBalance : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 87; # int : list operation : @parameter%getBalance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @parameter%getBalance : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%getBalance : @storage
                    DIG 4;      # @storage : mutez : @some : list operation : @parameter%getBalance
                    DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getBalance
                    DUG 5;      # @storage : mutez : @some : list operation : @parameter%getBalance : @storage
                    CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @parameter%getBalance : @storage
                    DIG 4;      # @parameter%getBalance : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @storage
                    GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : mutez : @some : list operation : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:87 # @some : mutez : @some : list operation : @storage
                      }
                      {
                        PUSH int 87; # int : mutez : @some : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : mutez : @some : list operation : @storage
                    CDAR;       # nat : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%getTotalSupply : @storage
                DROP;       # @parameter%getTotalSupply : @storage
                # == getTotalSupply ==
                # sp.transfer(self.data.totalSupply, sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getTotalSupply : @storage
                CONTRACT nat; # option (contract nat) : @storage
                NIL operation; # list operation : option (contract nat) : @storage
                SWAP;       # option (contract nat) : list operation : @storage
                IF_SOME
                  {}
                  {
                    PUSH int 95; # int : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @storage
                PUSH mutez 0; # mutez : @some : list operation : @storage
                DIG 3;      # @storage : mutez : @some : list operation
                DUP;        # @storage : @storage : mutez : @some : list operation
                DUG 4;      # @storage : mutez : @some : list operation : @storage
                CDDR;       # nat : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%mint : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # == mint ==
                    # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%mint : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @storage : @storage : @parameter%mint : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 2;      # @storage : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAAR;       # address : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SENDER;     # address : address : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    COMPARE;    # int : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    EQ;         # bool : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # @storage : @parameter%mint : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # if ~ (self.data.balances.contains(params.address)): # @storage : @parameter%mint : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @storage : @storage : @parameter%mint : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 2;      # @storage : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 2;      # @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAR;        # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    MEM;        # bool : @parameter%mint : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    IF
                      {
                        DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%mint : @storage
                        DROP;       # @parameter%mint : @storage
                      }
                      {
                        DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%mint : @storage
                        DROP;       # @parameter%mint : @storage
                        SWAP;       # @storage : @parameter%mint
                        # self.data.balances[params.address] = sp.record(approvals = {}, balance = 0, counter = 0) # @storage : @parameter%mint
                        DUP;        # @storage : @storage : @parameter%mint
                        CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%mint
                        SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        CDR;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        DIG 3;      # @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                        DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                        DUG 4;      # @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        CAR;        # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        PUSH (option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) (Some (Pair {} (Pair 0 0))); # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        SWAP;       # address : option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        UPDATE;     # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        SWAP;       # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        PAIR;       # pair address (big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        PAIR;       # pair (pair address (big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
                        SWAP;       # @parameter%mint : pair (pair address (big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
                      }; # @parameter%mint : @storage
                    SWAP;       # @storage : @parameter%mint
                    # self.data.balances[params.address].balance += params.value # @storage : @parameter%mint
                    DUP;        # @storage : @storage : @parameter%mint
                    CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%mint
                    SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CDR;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DUP;        # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DIG 4;      # @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                    DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                    DUG 5;      # @parameter%mint : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CAR;        # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    IF_SOME
                      {}
                      {
                        PUSH int 70; # int : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DUP;        # @some : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CAR;        # map address nat : @some : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    SWAP;       # @some : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CDR;        # pair (nat %balance) (nat %counter) : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DUP;        # pair (nat %balance) (nat %counter) : pair (nat %balance) (nat %counter) : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CDR;        # nat : pair (nat %balance) (nat %counter) : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    SWAP;       # pair (nat %balance) (nat %counter) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CAR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    DIG 7;      # @parameter%mint : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                    DUP;        # @parameter%mint : @parameter%mint : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply)
                    DUG 8;      # @parameter%mint : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    CDR;        # nat : nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    ADD;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    PAIR;       # pair nat nat : map address nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    SWAP;       # map address nat : pair nat nat : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    PAIR;       # pair (map address nat) (pair nat nat) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    SOME;       # option (pair (map address nat) (pair nat nat)) : address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    SWAP;       # address : option (pair (map address nat) (pair nat nat)) : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    UPDATE;     # big_map address (pair (map address nat) (pair nat nat)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    SWAP;       # address : big_map address (pair (map address nat) (pair nat nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    PAIR;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                    PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
                    # self.data.totalSupply += params.value # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
                    DUP;        # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
                    CAR;        # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
                    SWAP;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair (bool %paused) (nat %totalSupply)) : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%mint
                    CDR;        # pair (bool %paused) (nat %totalSupply) : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%mint
                    DUP;        # pair (bool %paused) (nat %totalSupply) : pair (bool %paused) (nat %totalSupply) : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%mint
                    CAR;        # bool : pair (bool %paused) (nat %totalSupply) : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%mint
                    SWAP;       # pair (bool %paused) (nat %totalSupply) : bool : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%mint
                    CDR;        # nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat))) : @parameter%mint
                    DIG 3;      # @parameter%mint : nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                    CDR;        # nat : nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                    ADD;        # nat : bool : pair address (big_map address (pair (map address nat) (pair nat nat)))
                    SWAP;       # bool : nat : pair address (big_map address (pair (map address nat) (pair nat nat)))
                    PAIR;       # pair bool nat : pair address (big_map address (pair (map address nat) (pair nat nat)))
                    SWAP;       # pair address (big_map address (pair (map address nat) (pair nat nat))) : pair bool nat
                    PAIR;       # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair bool nat)
                  }
                  {
                    SWAP;       # @storage : @parameter%setAdministrator : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # == setAdministrator ==
                    # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setAdministrator : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @storage : @storage : @parameter%setAdministrator : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 2;      # @storage : @parameter%setAdministrator : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAAR;       # address : @parameter%setAdministrator : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SENDER;     # address : address : @parameter%setAdministrator : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    COMPARE;    # int : @parameter%setAdministrator : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    EQ;         # bool : @parameter%setAdministrator : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    IF
                      {
                        DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%setAdministrator : @storage
                        DROP;       # @parameter%setAdministrator : @storage
                      }
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setAdministrator : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%setAdministrator : @storage
                    SWAP;       # @storage : @parameter%setAdministrator
                    # self.data.administrator = params # @storage : @parameter%setAdministrator
                    DUP;        # @storage : @storage : @parameter%setAdministrator
                    CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%setAdministrator
                    SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%setAdministrator
                    CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (bool %paused) (nat %totalSupply) : @parameter%setAdministrator
                    DIG 2;      # @parameter%setAdministrator : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : pair (bool %paused) (nat %totalSupply)
                    PAIR;       # pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair (bool %paused) (nat %totalSupply)
                    PAIR;       # pair (pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
                  }; # pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair bool nat)
                NIL operation; # list operation : pair (pair address (big_map address (pair (map address nat) (pair nat nat)))) (pair bool nat)
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%setPause : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                # == setPause ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setPause : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUP;        # @storage : @storage : @parameter%setPause : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                DUG 2;      # @storage : @parameter%setPause : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                CAAR;       # address : @parameter%setPause : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                SENDER;     # address : address : @parameter%setPause : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                COMPARE;    # int : @parameter%setPause : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                EQ;         # bool : @parameter%setPause : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                IF
                  {
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%setPause : @storage
                    DROP;       # @parameter%setPause : @storage
                  }
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setPause : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%setPause : @storage
                SWAP;       # @storage : @parameter%setPause
                # self.data.paused = params # @storage : @parameter%setPause
                DUP;        # @storage : @storage : @parameter%setPause
                CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : @storage : @parameter%setPause
                SWAP;       # @storage : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : @parameter%setPause
                CDDR;       # nat : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : @parameter%setPause
                DIG 2;      # @parameter%setPause : nat : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))
                PAIR;       # pair @parameter%setPause nat : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))
                SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter)))) : pair @parameter%setPause nat
                PAIR;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair @parameter%setPause nat)
                NIL operation; # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair @parameter%setPause nat)
              }
              {
                IF_LEFT
                  {
                    # == transfer ==
                    # y2 = sp.local("y2", self.transfer_helper(sp.record(in_param = sp.record(from_ = params.from_, sender_ = sp.sender, to_ = params.to_, value = params.value), in_storage = self.data))) # @parameter%transfer : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : @storage
                    DUP;        # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : @storage
                    DUG 3;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 2;      # @parameter%transfer : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%transfer : @parameter%transfer : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CDDR;       # nat : @parameter%transfer : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # @parameter%transfer : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%transfer : @parameter%transfer : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 4;      # @parameter%transfer : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CDAR;       # address : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR %to_ %value; # pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SENDER;     # address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 4;      # @parameter%transfer : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%transfer : @parameter%transfer : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 5;      # @parameter%transfer : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAR;        # address : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR %from_ %sender_; # pair (address %from_) (address %sender_) : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR;       # pair (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value)) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR %in_param %in_storage; # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (@storage %in_storage) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    EXEC;       # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # self.data = y2.value.storage # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CDDR;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 2;      # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # for op in y2.value.operations: ... # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAR;        # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    NIL operation; # list operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # list operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    ITER
                      {
                        # sp.operations().push(op) # operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CONS;       # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                      }; # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : list operation : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DROP;       # list operation : @parameter%transfer : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # @parameter%transfer : list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DROP;       # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
                    DROP;       # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
                  }
                  {
                    # == transferSigned ==
                    # sender = sp.local("sender", sp.sender) # @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SENDER;     # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # if params.from_ != sender.value: # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # address : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 2;      # @parameter%transferSigned : address : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%transferSigned : @parameter%transferSigned : address : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 3;      # @parameter%transferSigned : address : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAAR;       # address : address : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    COMPARE;    # int : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    NEQ;        # bool : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    IF
                      {
                        # if sp.check_signature(params.pk, params.signed, sp.blake2b(mi.SELF; ADDRESS; CHAIN_ID; PAIR; PAIR; PACK((self.data.balances[params.from_].counter, sp.blake2b(sp.concat(sp.list([sp.pack(params.from_), sp.pack(params.to_), sp.pack(params.value)]))))))): # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        NIL bytes;  # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DIG 2;      # @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUP;        # @parameter%transferSigned : @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUG 3;      # @parameter%transferSigned : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CDDDR;      # nat : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        PACK;       # bytes : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CONS;       # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DIG 2;      # @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUP;        # @parameter%transferSigned : @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUG 3;      # @parameter%transferSigned : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CDDAR;      # address : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        PACK;       # bytes : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CONS;       # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DIG 2;      # @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUP;        # @parameter%transferSigned : @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUG 3;      # @parameter%transferSigned : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CAAR;       # address : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        PACK;       # bytes : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CONS;       # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CONCAT;     # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        BLAKE2B;    # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DIG 3;      # @storage : bytes : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUP;        # @storage : @storage : bytes : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUG 4;      # @storage : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DIG 3;      # @parameter%transferSigned : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUP;        # @parameter%transferSigned : @parameter%transferSigned : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUG 4;      # @parameter%transferSigned : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CAAR;       # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        IF_SOME
                          {
                            # of_some: Get-item:32 # @some : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                          }
                          {
                            PUSH int 32; # int : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            FAILWITH;   # FAILED
                          }; # @some : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CDDR;       # nat : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        PAIR;       # pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        SELF;       # contract (or (or (or (pair %approve (address %spender) (nat %value)) (pair %burn (address %address) (nat %value))) (or (address %getAdministrator) (or (pair %getAllowance (pair %arg (address %owner) (address %spender)) (address %target)) (pair %getBalance (address %arg) (address %target))))) (or (or (address %getTotalSupply) (or (pair %mint (address %address) (nat %value)) (address %setAdministrator))) (or (bool %setPause) (or (pair %transfer (address %from_) (pair (address %to_) (nat %value))) (pair %transferSigned (pair (address %from_) (key %pk)) (pair (signature %signed) (pair (address %to_) (nat %value)))))))) : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        ADDRESS;    # address : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CHAIN_ID;   # chain_id : address : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        PAIR;       # pair chain_id address : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        PAIR;       # pair (pair chain_id address) (pair nat bytes) : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        PACK;       # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        BLAKE2B;    # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DIG 2;      # @parameter%transferSigned : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUP;        # @parameter%transferSigned : @parameter%transferSigned : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CDAR;       # signature : @parameter%transferSigned : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        SWAP;       # @parameter%transferSigned : signature : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUP;        # @parameter%transferSigned : @parameter%transferSigned : signature : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        DUG 4;      # @parameter%transferSigned : signature : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CADR;       # key : signature : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CHECK_SIGNATURE; # bool : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        IF
                          {
                            DROP;       # @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            # sender.value = sp.to_address(sp.implicit_account(sp.hash_key(params.pk))) # @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUP;        # @parameter%transferSigned : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CADR;       # key : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            HASH_KEY;   # key_hash : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            IMPLICIT_ACCOUNT; # contract unit : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            ADDRESS;    # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                          }
                          {
                            # failwith # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            NIL bytes;  # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DIG 2;      # @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUP;        # @parameter%transferSigned : @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUG 3;      # @parameter%transferSigned : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CDDDR;      # nat : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PACK;       # bytes : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CONS;       # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DIG 2;      # @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUP;        # @parameter%transferSigned : @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUG 3;      # @parameter%transferSigned : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CDDAR;      # address : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PACK;       # bytes : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CONS;       # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DIG 2;      # @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUP;        # @parameter%transferSigned : @parameter%transferSigned : list bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUG 3;      # @parameter%transferSigned : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CAAR;       # address : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PACK;       # bytes : list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CONS;       # list bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CONCAT;     # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            BLAKE2B;    # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DIG 3;      # @storage : bytes : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUP;        # @storage : @storage : bytes : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUG 4;      # @storage : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CADR;       # big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DIG 3;      # @parameter%transferSigned : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUP;        # @parameter%transferSigned : @parameter%transferSigned : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            DUG 4;      # @parameter%transferSigned : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CAAR;       # address : big_map address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            GET;        # option (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))) : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            IF_SOME
                              {
                                # of_some: Get-item:32 # @some : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                              }
                              {
                                PUSH int 32; # int : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                                FAILWITH;   # FAILED
                              }; # @some : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CDDR;       # nat : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PAIR;       # pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            SELF;       # contract (or (or (or (pair %approve (address %spender) (nat %value)) (pair %burn (address %address) (nat %value))) (or (address %getAdministrator) (or (pair %getAllowance (pair %arg (address %owner) (address %spender)) (address %target)) (pair %getBalance (address %arg) (address %target))))) (or (or (address %getTotalSupply) (or (pair %mint (address %address) (nat %value)) (address %setAdministrator))) (or (bool %setPause) (or (pair %transfer (address %from_) (pair (address %to_) (nat %value))) (pair %transferSigned (pair (address %from_) (key %pk)) (pair (signature %signed) (pair (address %to_) (nat %value)))))))) : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            ADDRESS;    # address : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            CHAIN_ID;   # chain_id : address : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PAIR;       # pair chain_id address : pair nat bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PAIR;       # pair (pair chain_id address) (pair nat bytes) : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PACK;       # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            BLAKE2B;    # bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PUSH string "MISSIGNED"; # string : bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            PAIR;       # pair string bytes : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                            FAILWITH;   # FAILED
                          }; # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                      }
                      {}; # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # y3 = sp.local("y3", self.transfer_helper(sp.record(in_param = sp.record(from_ = params.from_, sender_ = sender.value, to_ = params.to_, value = params.value), in_storage = self.data))) # address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 3;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : @storage
                    DUP;        # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : @storage
                    DUG 4;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 3;      # @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 3;      # @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%transferSigned : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CDDDR;      # nat : @parameter%transferSigned : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # @parameter%transferSigned : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%transferSigned : @parameter%transferSigned : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 5;      # @parameter%transferSigned : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CDDAR;      # address : nat : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR %to_ %value; # pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 3;      # address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # address : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 4;      # address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 5;      # @parameter%transferSigned : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # @parameter%transferSigned : @parameter%transferSigned : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 6;      # @parameter%transferSigned : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAAR;       # address : address : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR %from_ %sender_; # pair (address %from_) (address %sender_) : pair (address %to_) (nat %value) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR;       # pair (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value)) : @storage : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    PAIR %in_param %in_storage; # pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (@storage %in_storage) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    EXEC;       # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # self.data = y3.value.storage # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CDDR;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUG 3;      # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    # for op in y3.value.operations: ... # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DUP;        # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    CAR;        # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    NIL operation; # list operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # list operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    ITER
                      {
                        # sp.operations().push(op) # operation : list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                        CONS;       # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                      }; # list operation : pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) : list operation : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DROP;       # list operation : address : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # address : list operation : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DROP;       # list operation : @parameter%transferSigned : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    SWAP;       # @parameter%transferSigned : list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DROP;       # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)) : lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))))
                    DIG 2;      # lambda (pair (pair %in_param (pair (address %from_) (address %sender_)) (pair (address %to_) (nat %value))) (pair %in_storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))) (pair (list %operations operation) (pair (unit %result) (pair %storage (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))))) : list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
                    DROP;       # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
                  }; # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
              }; # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (pair (nat %balance) (nat %counter))))) (pair @parameter%setPause nat)
          }; # list operation : @storage
      }; # list operation : pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
    NIL operation; # list operation : list operation : pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
    SWAP;       # list operation : list operation : pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
    ITER
      {
        CONS;       # list operation : pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
      }; # list operation : pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply))
    PAIR;       # pair (list operation) (pair (pair address (big_map address (pair (map address nat) (pair (nat %balance) (nat %counter))))) (pair (bool %paused) (nat %totalSupply)))
  };